#pragma semicolon 1
#pragma newdecls required

#include <forsaken>
#include <forsaken_endgame>
#include <colors>
#include <json>
#include <sourcemod>

/*****************************************************************
			G L O B A L   V A R S
*****************************************************************/

#define PLUGIN_VERSION	"0.2"
#define MAX_PLAYER_TEAM 4
#define PREFIX "[{olive}Native{default}]"

/*****************************************************************
			P L U G I N   I N F O
*****************************************************************/
public Plugin myinfo =
{
	name		= "Forsaken Native",
	author		= "lechuga",
	description = "Perform tests for the native ones generated by the other plugins",
	version		= PLUGIN_VERSION,
	url			= "https://github.com/lechuga16/4saken_Matchmaking"


}

/*****************************************************************
			F O R W A R D   P U B L I C S
*****************************************************************/

public void
	OnPluginStart()
{
	CreateConVar("sm_native_version", PLUGIN_VERSION, "Plugin version", FCVAR_REPLICATED | FCVAR_NOTIFY | FCVAR_SPONLY | FCVAR_DONTRECORD);
	RegConsoleCmd("sm_native_forsaken", Cmd_Forsaken);
	RegConsoleCmd("sm_native_endgame", Cmd_Endgame);
	RegConsoleCmd("sm_native_steamid", Cmd_SteamID);
}

public void OnEndGame()
{
	CPrintToChatAll("%s Forward EndGame is {blue}on{default}", PREFIX);
}

public Action Cmd_Forsaken(int iClient, int iArgs)
{
	if (iArgs != 0)
	{
		CReplyToCommand(iClient, "Usage: sm_native_forsaken");
		return Plugin_Continue;
	}

	CReplyToCommand(iClient, "%s Type Match: ({olive}%s{default})", PREFIX, sTypeMatch[Forsaken_TypeMatch()]);

	char
		sSteamIDTA[MAX_PLAYER_TEAM][MAX_AUTHID_LENGTH],
		sSteamIDTB[MAX_PLAYER_TEAM][MAX_AUTHID_LENGTH],
		sNameTA[MAX_PLAYER_TEAM][MAX_NAME_LENGTH],
		sNameTB[MAX_PLAYER_TEAM][MAX_NAME_LENGTH],
		sMapName[32];

	Forsaken_MapName(sMapName, sizeof(sMapName));
	CReplyToCommand(iClient, "%s Map Name: ({olive}%s{default})", PREFIX, sMapName);

	for (int i = 0; i <= 3; i++)
	{
		Forsaken_TeamA(i, sSteamIDTA[i], MAX_AUTHID_LENGTH);
		Forsaken_TeamB(i, sSteamIDTB[i], MAX_AUTHID_LENGTH);
		Forsaken_NameTA(i, sNameTA[i], MAX_NAME_LENGTH);
		Forsaken_NameTB(i, sNameTB[i], MAX_NAME_LENGTH);
	}

	char
		sTmpBufferTA[128],
		sTmpBufferTB[128],
		sPrintBufferTA[1024],
		sPrintBufferTB[1024];

	Format(sTmpBufferTA, sizeof(sTmpBufferTA), "%s {blue}Supervivientes{default}:\n", PREFIX);
	StrCat(sPrintBufferTA, sizeof(sPrintBufferTA), sTmpBufferTA);

	Format(sTmpBufferTB, sizeof(sTmpBufferTB), "%s {red}Infectados{default}:\n", PREFIX);
	StrCat(sPrintBufferTB, sizeof(sPrintBufferTB), sTmpBufferTB);

	for (int iID = 0; iID <= 3; iID++)
	{
		Format(sTmpBufferTA, sizeof(sTmpBufferTA), "{olive}%s{default}:", sSteamIDTA[iID]);
		StrCat(sPrintBufferTA, sizeof(sPrintBufferTA), sTmpBufferTA);

		Format(sTmpBufferTA, sizeof(sTmpBufferTA), "{green}%s{default} ", sNameTA[iID]);
		StrCat(sPrintBufferTA, sizeof(sPrintBufferTA), sTmpBufferTA);

		if (iID == 1)
		{
			Format(sTmpBufferTA, sizeof(sTmpBufferTA), "\n");
			StrCat(sPrintBufferTA, sizeof(sPrintBufferTA), sTmpBufferTA);
		}

		Format(sTmpBufferTB, sizeof(sTmpBufferTB), "{olive}%s{default}:", sSteamIDTB[iID]);
		StrCat(sPrintBufferTB, sizeof(sPrintBufferTB), sTmpBufferTB);

		Format(sTmpBufferTB, sizeof(sTmpBufferTB), "{green}%s{default} ", sNameTB[iID]);
		StrCat(sPrintBufferTB, sizeof(sPrintBufferTB), sTmpBufferTB);

		if (iID == 1)
		{
			Format(sTmpBufferTB, sizeof(sTmpBufferTB), "\n");
			StrCat(sPrintBufferTB, sizeof(sPrintBufferTB), sTmpBufferTB);
		}
	}

	CReplyToCommand(iClient, sPrintBufferTA);
	CReplyToCommand(iClient, sPrintBufferTB);

	return Plugin_Continue;
}

public Action Cmd_Endgame(int iClient, int iArgs)
{
	if (iArgs != 0)
	{
		CReplyToCommand(iClient, "Usage: sm_native_endgame");
		return Plugin_Continue;
	}

	CReplyToCommand(iClient, "%s EndGame %s", PREFIX, IsEndGame() ? "{blue}True{default}" : "{red}False{default}");
	return Plugin_Continue;
}

public Action Cmd_SteamID(int iClient, int iArgs)
{
	if (iArgs != 0)
	{
		CReplyToCommand(iClient, "Usage: sm_native_steamid");
		return Plugin_Continue;
	}

	if (iClient == 0)
	{
		CReplyToCommand(iClient, "[Native] No puedes usar este comando desde la consola");
		return Plugin_Continue;
	}

	char
		sSteamID[32],
		sCommunityID[32];

	GetClientAuthId(iClient, AuthId_Engine, sSteamID, sizeof(sSteamID));
	CPrintToChat(iClient, "%s You SteamID: {olive}%s{default}", PREFIX, sSteamID);

	SteamIDToCommunityID(sCommunityID, sizeof(sCommunityID), sSteamID);
	CPrintToChat(iClient, "%s You CommunityID: {olive}%s{default}", PREFIX, sCommunityID);

	return Plugin_Continue;
}