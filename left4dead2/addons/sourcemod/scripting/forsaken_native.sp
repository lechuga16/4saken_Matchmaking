#pragma semicolon 1
#pragma newdecls required

#define forsaken_left4dhooks_included 1
#include <forsaken>
#undef REQUIRE_PLUGIN
#include <forsaken_endgame>
#include <forsaken_jarvis>
#include <forsaken_reserved>
#define REQUIRE_PLUGIN
#include <colors>
#include <json>
#include <sourcemod>
#include <left4dhooks>

/*****************************************************************
			G L O B A L   V A R S
*****************************************************************/

#define PLUGIN_VERSION	"0.2"
#define MAX_PLAYER_TEAM 4
#define PREFIX			"[{olive}Native{default}]"

native int	 SURVMVP_GetMVP();
native int	 SURVMVP_GetMVPCI();
native float SURVMVP_GetMVPDmgPercent(int client);
native float SURVMVP_GetMVPCIPercent(int client);

public SharedPlugin __pl_survivor_mvp = {
	required = 0,
};

public void __pl_survivor_mvp_SetNTVOptional()
{
	MarkNativeAsOptional("SURVMVP_GetMVP");
	MarkNativeAsOptional("SURVMVP_GetMVPCI");
	MarkNativeAsOptional("SURVMVP_GetMVPDmgPercent");
	MarkNativeAsOptional("SURVMVP_GetMVPCIPercent");
}

/**
 * Basic structure of a player.
 */
enum struct Player
{
	char steamid[MAX_AUTHID_LENGTH];	// Player SteamID
	char name[MAX_NAME_LENGTH];			// Player name
	int	 client;						// Client id
}

Database
	g_DBForsaken,
	g_DBSourceBans;

/*****************************************************************
			P L U G I N   I N F O
*****************************************************************/
public Plugin myinfo =
{
	name		= "Forsaken Native",
	author		= "lechuga",
	description = "Perform tests for the native ones generated by the other plugins",
	version		= PLUGIN_VERSION,
	url			= "https://github.com/lechuga16/4saken_Matchmaking"


}

/*****************************************************************
			F O R W A R D   P U B L I C S
*****************************************************************/

public void
	OnPluginStart()
{
	CreateConVar("sm_native_version", PLUGIN_VERSION, "Plugin version", FCVAR_REPLICATED | FCVAR_NOTIFY | FCVAR_SPONLY | FCVAR_DONTRECORD);
	RegConsoleCmd("sm_native_forsaken", Cmd_Forsaken, "Perform tests for the native ones generated by the other plugins");
	RegConsoleCmd("sm_native_endgame", Cmd_Endgame, "Perform tests for the native ones generated by the other plugins");
	RegConsoleCmd("sm_native_mmr", Cmd_MMR, "Perform tests for the native ones generated by the other plugins");
	RegConsoleCmd("sm_native_mvp", Cmd_MVP, "Perform tests for the native ones generated by the other plugins");
	RegConsoleCmd("sm_native_steamid", Cmd_Steamid, "Perform tests for the native ones generated by the other plugins");

	RegConsoleCmd("sm_native_flipped", Cmd_Teamflipped);
	RegConsoleCmd("sm_native_end", Cmd_End);

	RegAdminCmd("sm_native_jarvis", Cmd_jarvis, ADMFLAG_ROOT, "Perform tests for the native ones generated by the other plugins");
	RegAdminCmd("sm_native_checkbans", Cmd_CheckBans, ADMFLAG_GENERIC);

	SQLConnect();
}

public void OnEndGame()
{
	CPrintToChatAll("%s Forward {blue}EndGame{default} is {green}on{default}", PREFIX);
}

public void OnMapDownload(const char[] sMap)
{
	CPrintToChatAll("%s Forward {blue}Reserved{default} is {green}%s{default}", PREFIX, sMap);
}

public Action Cmd_Forsaken(int iClient, int iArgs)
{
	if (iArgs != 0)
	{
		CReplyToCommand(iClient, "Usage: {blue}sm_native_forsaken{default}");
		return Plugin_Continue;
	}

	CReplyToCommand(iClient, "%s Type Match: ({olive}%s{default})", PREFIX, sTypeMatch[fkn_TypeMatch()]);

	char		sMapName[32];
	PlayerBasic Players[ForsakenTeam][MAX_PLAYER_TEAM];
	fkn_PlayersBasic();

	CReplyToCommand(iClient, "%s QueueID: ({green}%d{default})", PREFIX, fkn_QueueID());
	fkn_MapName(sMapName, sizeof(sMapName));
	CReplyToCommand(iClient, "%s Map Name: ({olive}%s{default})", PREFIX, sMapName);

	char
		sTmpBufferTA[128],
		sTmpBufferTB[128],
		sPrintBufferTA[1024],
		sPrintBufferTB[1024];

	Format(sTmpBufferTA, sizeof(sTmpBufferTA), "%s {blue}TeamA{default}:\n", PREFIX);
	StrCat(sPrintBufferTA, sizeof(sPrintBufferTA), sTmpBufferTA);

	Format(sTmpBufferTB, sizeof(sTmpBufferTB), "%s {red}TeamB{default}:\n", PREFIX);
	StrCat(sPrintBufferTB, sizeof(sPrintBufferTB), sTmpBufferTB);

	for (int iID = 0; iID <= 3; iID++)
	{
		Format(sTmpBufferTA, sizeof(sTmpBufferTA), "({olive}%s{default}:", Players[TeamA][iID].steamid);
		StrCat(sPrintBufferTA, sizeof(sPrintBufferTA), sTmpBufferTA);

		Format(sTmpBufferTA, sizeof(sTmpBufferTA), "%s) ", Players[TeamA][iID].name);
		StrCat(sPrintBufferTA, sizeof(sPrintBufferTA), sTmpBufferTA);

		if (iID == 1)
		{
			Format(sTmpBufferTA, sizeof(sTmpBufferTA), "\n");
			StrCat(sPrintBufferTA, sizeof(sPrintBufferTA), sTmpBufferTA);
		}

		Format(sTmpBufferTB, sizeof(sTmpBufferTB), "({olive}%s{default}:", Players[TeamB][iID].steamid);
		StrCat(sPrintBufferTB, sizeof(sPrintBufferTB), sTmpBufferTB);

		Format(sTmpBufferTB, sizeof(sTmpBufferTB), "%s) ", Players[TeamB][iID].name);
		StrCat(sPrintBufferTB, sizeof(sPrintBufferTB), sTmpBufferTB);

		if (iID == 1)
		{
			Format(sTmpBufferTB, sizeof(sTmpBufferTB), "\n");
			StrCat(sPrintBufferTB, sizeof(sPrintBufferTB), sTmpBufferTB);
		}
	}

	CReplyToCommand(iClient, sPrintBufferTA);
	CReplyToCommand(iClient, sPrintBufferTB);

	return Plugin_Continue;
}

public Action Cmd_Endgame(int iClient, int iArgs)
{
	if (iArgs != 0)
	{
		CReplyToCommand(iClient, "Usage: {blue}sm_native_endgame{default}");
		return Plugin_Continue;
	}

	CReplyToCommand(iClient, "%s EndGame %s", PREFIX, IsEndGame() ? "{blue}True{default}" : "{red}False{default}");
	return Plugin_Continue;
}

public Action Cmd_MMR(int iClient, int iArgs)
{
	char
		sSteamID[32],
		sCommunityID[32];

	DBResultSet rsForsaken;

	GetClientAuthId(iClient, AuthId_Engine, sSteamID, sizeof(sSteamID));
	SteamIDToCommunityID(sCommunityID, sizeof(sCommunityID), sSteamID);

	char
		sQuery[256],
		error[255];

	Format(sQuery, sizeof(sQuery),
		   "SELECT `Rating`, `Deviation`, `Wins` \
			FROM `users_mmr` AS m \
			INNER JOIN `users_general` AS g \
			ON `g`.`MMRID` = `m`.`MMRID` \
			WHERE `g`.`SteamID64` = '%s';", sCommunityID);

	if ((rsForsaken = SQL_Query(g_DBForsaken, sQuery)) == null)
	{
		SQL_GetError(g_DBForsaken, error, sizeof(error));
		LogError("FetchUsers() query failed: %s", sQuery);
		LogError("Query error: %s", error);
		return Plugin_Continue;
	}

	float
		fRating,
		fDeviation;
	int fWins;

	while (rsForsaken.FetchRow())
	{
		fRating	   = rsForsaken.FetchFloat(0);
		fDeviation = rsForsaken.FetchFloat(1);
		fWins	   = rsForsaken.FetchInt(2);
	}

	fkn_log("%s has an Rating:%.1f, Deviation:%.1f ,Wins:%d", sSteamID, fRating, fDeviation, fWins);
	CPrintToChatAll("%s %s has an Rating:{olive}%.1f{default}, Deviation:{olive}%.1f{default}, Wins:{olive}%d{default}", PREFIX, sSteamID, fRating, fDeviation, fWins);
	return Plugin_Continue;
}

public Action Cmd_MVP(int iClient, int iArgs)
{
	if (iArgs != 0)
	{
		CReplyToCommand(iClient, "Usage: {blue}sm_native_mvp{default}");
		return Plugin_Continue;
	}

	CheckMVP(iClient);
	CheckMVP(iClient, false);

	CheckMVPList(iClient);
	CheckMVPList(iClient, false);
	return Plugin_Continue;
}

public Action Cmd_Steamid(int iClient, int iArgs)
{
	if (iArgs != 1)
	{
		CReplyToCommand(iClient, "%s Usage: {blue}sm_native_steamid{default} <SteamID64>", PREFIX);
		return Plugin_Handled;
	}

	char
		sSteamID64[32],
		sSteamID2[32];

	GetCmdArgString(sSteamID64, sizeof(sSteamID64));
	int iSteamID64[2];
	CReplyToCommand(iClient, "%s SteamID64: {blue}%s", PREFIX, sSteamID64);

	if ((StringToInt64(sSteamID64, iSteamID64)) == 0)
		CReplyToCommand(iClient, "%s StringToInt failed", PREFIX);

	CReplyToCommand(iClient, "%s AccountID: {blue}%d", PREFIX, iSteamID64[0]);
	GetSteam2FromAccountId(sSteamID2, sizeof(sSteamID2), iSteamID64[0]);
	CReplyToCommand(iClient, "%s SteamID2: {blue}%s", PREFIX, sSteamID2);

	return Plugin_Handled;
}

public Action Cmd_jarvis(int iClient, int iArgs)
{
	if (iArgs != 0)
	{
		CReplyToCommand(iClient, "Usage: {blue}sm_native_jarvis{default}");
		return Plugin_Handled;
	}

	ForsakenBan(0, view_as<int>(TeamA), 1, "Testing %S", "OfflineBan");
	return Plugin_Handled;
}

public Action Cmd_CheckBans(int iClient, int iArgs)
{
	if (iArgs != 1)
	{
		CReplyToCommand(iClient, "Usage: checkbans <SteamID64>");
		return Plugin_Handled;
	}

	char
		sSteamID64[32],
		sSteamID2[32];
	int iSteamID64[2];

	GetCmdArgString(sSteamID64, sizeof(sSteamID64));
	if ((StringToInt64(sSteamID64, iSteamID64)) == 0)
		CReplyToCommand(iClient, "%s StringToInt failed", PREFIX);

	GetSteam2FromAccountId(sSteamID2, sizeof(sSteamID2), iSteamID64[0]);

	DBResultSet rsSourceBans;
	char
		sQuery[256],
		error[255],
		sBanCode[32] = "%ConVar <sv_consistency 0> violation%";

	int
		iBans,
		iTimeLimit = GetTime() - UNIXTIME_4WEEKS;

	Format(sQuery, sizeof(sQuery),
		   "SELECT COUNT(*) \
			FROM `sb_bans` \
			WHERE `authid` LIKE '%s' \
				AND `reason` LIKE '%s' \
				AND `created` > '%d' \
			GROUP BY `authid` \
			HAVING COUNT(*) > '1'", sSteamID2, sBanCode, iTimeLimit);

	if ((rsSourceBans = SQL_Query(g_DBSourceBans, sQuery)) == null)
	{
		SQL_GetError(g_DBSourceBans, error, sizeof(error));
		fkn_log("FetchUsers() query failed: %s", sQuery);
		fkn_log("Query error: %s", error);
		return Plugin_Continue;
	}

	while (rsSourceBans.FetchRow())
	{
		iBans = rsSourceBans.FetchInt(0);
	}

	CReplyToCommand(iClient, "%s SteamID2:%s | Bans:%d | BanCode:%s | TimeLimit:%d", PREFIX, sSteamID2, iBans, sBanCode, iTimeLimit);
	fkn_log("Query: %s", sQuery);
	return Plugin_Handled;
}

public Action Cmd_Teamflipped(int iClient, int iArgs)
{
	if (iArgs != 0)
	{
		CReplyToCommand(iClient, "Usage: {blue}sm_native_teamflipped{default}");
		return Plugin_Handled;
	}

	CReplyToCommand(iClient, "Status: %d", GameRules_GetProp("m_bAreTeamsFlipped"));
	CReplyToCommand(iClient, "Status: %s", GameRules_GetProp("m_bAreTeamsFlipped") ? "true" : "false");
	return Plugin_Handled;
}

public Action Cmd_End(int iClient, int iArgs)
{
	Handle newEvent = CreateEvent("versus_match_finished", true);
	SetEventInt(newEvent, "winners", 1);
	FireEvent(newEvent, true);
	return Plugin_Handled;
}

/*****************************************************************
			P L U G I N   F U N C T I O N S
*****************************************************************/
public void SQLConnect()
{
	if (!SQL_CheckConfig("4saken"))
		fkn_log("The 4saken configuration is not found in databases.cfg");
	else
		Database.Connect(SQL4saken, "4saken");

	if (!SQL_CheckConfig("sourcebans"))
		fkn_log("The sourcebans configuration is not found in databases.cfg");
	else
		Database.Connect(GotDatabase, "sourcebans");
}

/**
 * @brief Represents a set of results returned from executing a query.
 *
 * @param db 			Database to query
 * @param error 		Error buffer
 * @param data			Data to pass to the callback
 * @noreturn
 */
public void SQL4saken(Database db, const char[] error, any data)
{
	if (db == null)
	{
		ThrowError("Error while connecting to database: %s", error);
		fkn_log("Error while connecting to database: %s", error);
	}
	else
	{
		g_DBForsaken = db;
		SQL_SetCharset(g_DBForsaken, "utf8mb4");
	}
}

/**
 * @brief Represents a set of results returned from executing a query.
 *
 * @param db 			Database to query
 * @param error 		Error buffer
 * @param data			Data to pass to the callback
 * @noreturn
 */
public void GotDatabase(Database db, const char[] error, any data)
{
	if (db == null)
	{
		ThrowError("Error while connecting to database: %s", error);
		fkn_log("Error while connecting to database: %s", error);
	}
	else
	{
		g_DBSourceBans = db;
		SQL_SetCharset(g_DBSourceBans, "utf8mb4");
	}
}

int CheckMVP(int iClient, bool bIsMVP = true)
{
	char
		sStemaID[32],
		sName[MAX_NAME_LENGTH];

	float fDmgPercent;

	if (ClientMVP(bIsMVP) == CONSOLE)
	{
		CReplyToCommand(iClient, "%s %s: {blue}Console{default}", PREFIX, bIsMVP ? "MVP" : "MVPCI");
		return ClientMVP(bIsMVP);
	}
	else if (!GetClientAuthId(ClientMVP(bIsMVP), AuthId_SteamID64, sStemaID, sizeof(sStemaID)))
	{
		fDmgPercent = ClientDMGPercent(bIsMVP);
		GetClientName(ClientMVP(bIsMVP), sName, sizeof(sName));

		CReplyToCommand(iClient, "%s %s: {blue}(%s){default} {green}(%.1f%%){default}", PREFIX, bIsMVP ? "MVP" : "MVPCI", sName, fDmgPercent);
		return ClientMVP(bIsMVP);
	}
	else
	{
		GetClientName(ClientMVP(bIsMVP), sName, sizeof(sName));
		fDmgPercent = ClientDMGPercent(bIsMVP);

		CReplyToCommand(iClient, "%s %s: {blue}(%s:%s){default} {green}(%.1f%%){default}", PREFIX, bIsMVP ? "MVP" : "MVPCI", sName, sStemaID, fDmgPercent);
		return ClientMVP(bIsMVP);
	}
}

void CheckMVPList(int iClient, bool bIsMVP = true)
{
	if (ClientMVP(bIsMVP) == CONSOLE)
		return;

	if (!AreTeamsFlipped())
		MVPListed(iClient, TeamA, bIsMVP);
	else
		MVPListed(iClient, TeamB, bIsMVP);
}

public void MVPListed(int iClient, ForsakenTeam team, bool bIsMVP)
{
	Player Players[ForsakenTeam][MAX_PLAYER_TEAM];
	fkn_Players();

	for (int i = 0; i <= MAX_INDEX_PLAYER; i++)
	{
		char sStemaID[32];
		GetClientAuthId(ClientMVP(bIsMVP), AuthId_SteamID64, sStemaID, sizeof(sStemaID));
		if (StrEqual(Players[team][i].steamid, sStemaID))
		{
			CReplyToCommand(iClient, "%s %s: {blue}(%s:%s){default} is on the forsaken list", PREFIX, bIsMVP ? "MVP" : "MVPCI", Players[team][i].name, Players[team][i].steamid);
		}
	}
}

public float ClientDMGPercent(bool bIsMVP)
{
	if (bIsMVP)
		return SURVMVP_GetMVPDmgPercent(ClientMVP(bIsMVP));
	else
		return SURVMVP_GetMVPCIPercent(ClientMVP(bIsMVP));
}

public int ClientMVP(bool bIsMVP)
{
	if (bIsMVP)
		return SURVMVP_GetMVP();
	else
		return SURVMVP_GetMVPCI();
}